name: Daily Build

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      buildNumber:
        description: 'Build Number'
        required: true
        default: '9999'
      buildYear:
        description: 'Build Year'
        required: true
        default: '2100'


env:
  WORKSPACE: ${{ github.workspace }}
  DEVELOPER_DIR: /Applications/Xcode_12.4.app/Contents/Developer
  BUILD_NUMBER: ${{ github.event.inputs.buildNumber }}
  YEAR: ${{ github.event.inputs.buildYear }}

jobs:
  source-code:
    name: Check out and process source code
    if: "!contains(github.ref, 'refs/tags/') || github.repository == 'coronalabs/corona'"
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: ./tools/GHAction/daily_env.sh
      - name: Set daily build
        run: ./tools/GHAction/process_sources.sh
      - name: Upload Source bundle
        uses: actions/upload-artifact@v1
        with:
          name: SourceCode
          path: ./output

  Xcode-template-matrix:
    strategy:
      matrix:
        xcode:
          - Xcode_12.4
        target:
          - template
          - template-angle
        platform:
          - iphone
          - tvos
        include:
          - xcode: Xcode_11.3.1
            target: template
            platform: iphone
    needs: source-code
    runs-on: macos-10.15
    env:
      DEVELOPER_DIR: /Applications/${{ matrix.xcode }}.app/Contents/Developer
      TEMPLATE_TARGET: ${{ matrix.target }}
      TEMPLATE_PLATFORM: ${{ matrix.platform }}
    steps:
      - name: Get processed code
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Build templates
        working-directory: ./platform/${{ matrix.platform }}
        run: ./gh_build_templates.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Build templates JSON spec
        run: ./tools/GHAction/generate_xcode_jsons.py
      - name: Upload templates
        uses: actions/upload-artifact@v1
        with:
          name: Templates-${{ matrix.platform }}-${{ matrix.xcode }}-${{ matrix.target }}
          path: ./output

  collect-ios-templates:
    needs:
      - Xcode-template-matrix
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - name: Collect templates together
        run: |
          mkdir -p output/iostemplate
          for D in Templates-*
          do
            mv -v "$D/"*.tar.bz output/iostemplate
          done
      - name: Generate template JSON
        run: find Templates-* -name '*_*-SDKs.json' -exec ./tools/GHAction/aggregate_xcode_jsons.py output {} \+
      - name: Upload templates
        uses: actions/upload-artifact@v1
        with:
          name: Collected-ios-templates
          path: ./output

  macOS-Simulator:
    needs:
      - source-code
      - collect-ios-templates
      - native
      - webtemplate
      - linux
    runs-on: macos-10.15
    steps:
      - name: Get processed code
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Check for macOS min supported version
        run: exit $( echo  $(cat platform/mac/AppDelegate.mm |  perl -ne 'print for /kosVersionCurrent = @"([0-9.]+)"/') ' < '  $(/usr/bin/xcrun --sdk macosx --show-sdk-version)  | bc )
      - name: Get collected templates
        uses: actions/download-artifact@v1
        with:
          name: Collected-ios-templates
      - name: Put collected iOS templates in place
        run: cp -Rv Collected-ios-templates/* platform/resources/
      - name: Get Webtemplate
        uses: actions/download-artifact@v1
        with:
          name: Webtemplate
      - name: Put webtemplate in place
        run: cp -v Webtemplate/webtemplate.zip platform/resources/
      - name: Get Linux templates
        uses: actions/download-artifact@v1
        with:
          name: Linux-Templates
      - name: Put webtemplate in place
        run: |
          cp -v Linux-Templates/linuxtemplate.tar.gz platform/resources/
          cp -v Linux-Templates/raspbiantemplate.tar.gz platform/resources/
      - run: mkdir docs
      - name: Get Sample Code
        uses: actions/checkout@v2
        with:
          repository: coronalabs/samples-coronasdk
          path: docs/SampleCode
      - name: Clean-up docs
        run: rm -rf docs/SampleCode/.git docs/SampleCode/.gitignore
      - name: Get Native
        uses: actions/download-artifact@v1
        with:
          name: Native
      - name: Put JRE in place
        shell: bash
        run: |
          curl -sL https://github.com/coronalabs/binary-data/releases/download/1.0/jre.macos.tgz -o jre.macos.tgz
      - name: install appdmg
        run: npm install -g appdmg
      - name: install imagemagick
        run: brew install imagemagick gs
      - name: Build DMG
        run: ./tools/GHAction/build_dmg.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Upload macOS Daily build artifact
        uses: actions/upload-artifact@v1
        with:
          name: Simulator-macOS
          path: ./output
  notarize:
    needs:
      - macOS-Simulator
    runs-on: macos-10.15
    steps:
      - name: Get built simulator
        uses: actions/download-artifact@v1
        with:
          name: Simulator-macOS
      - name: Notarize
        run: |
          if [ -z "$APPLE_AUTH" ]
          then 
            echo 'Skipping because no authorization provided'
            exit 0
          fi
          if [[ "$GITHUB_REF" == refs/tags/* ]]
          then
              : "${BUILD_NUMBER:=${GITHUB_REF#refs/tags/}}"
          else
              : "${BUILD_NUMBER:=$GITHUB_RUN_NUMBER}"
          fi
          for dmg in ./Simulator-macOS/*.dmg
          do
            xcrun altool --notarize-app $APPLE_AUTH --primary-bundle-id "com.coronalabs.CoronaSimulator.GH${BUILD_NUMBER}.$(date +"%b%d")"  --file "$dmg"
          done
        shell: bash
        env:
          APPLE_AUTH: ${{ secrets.AppleAuth }} # --username apple@id.email --password secret-app-specific-pwd --asc-provider anscaincz
  release:
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-20.04
    needs:
      - macOS-Simulator
    steps:
      - uses: actions/checkout@v2
      - run: ./tools/GHAction/daily_env.sh
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Solar2D ${{ env.YEAR }}.${{ env.BUILD }}
          body: ${{ env.GIT_LOG }}
      - name: Upload Release Asset for macOS Simulator
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Simulator-macOS/Corona-${{ env.YEAR }}.${{ env.BUILD }}.dmg
          asset_name: Solar2D-macOS-${{ env.YEAR }}.${{ env.BUILD }}.dmg
          asset_content_type: application/x-apple-diskimage
